plot_adjmatrix(u)
d2 <- rowSums(u)
plot_adjmatrix(diag(1/sqrt(d2)) %*% u %*% diag(1/sqrt(d2) ))
L <- diag(1/sqrt(d2)) %*% u %*% diag(1/sqrt(d2) )
colSums(L)
plot(eigen(L)$vectors[,1])
ord <- order(eigen(L)$vectors[,1])
plot_adjmatrix(L[ord, ord])
users
plot(eigen(L)$values)
plot(eigen(L)$vectors[,3], eigen(L)$vectors[,2])
text(x = eigen(L)$vectors[,3], eigen(L)$vectors[,2],  labels = c(labes1,
users))
plot(eigen(L)$vectors[,1], eigen(L)$vectors[,2])
text(x = eigen(L)$vectors[,1], eigen(L)$vectors[,2],  labels = c(labes1,
users))
users
plot_adjmatrix(diag(1/sqrt(d2)) %*% u %*% diag(1/sqrt(d2) ))
d2
sizes  <- sapply(arrays, function(x) length(x$user_id))
sizes
users[26:28]
i = 26
arrays <- c(list(usrfoll, usrfoll1, usrfoll2),
follows[1:28])
n = length(arrays)
commonfol <- matrix(0, n, n)
for(i in 1:(length(arrays))) {
for(j in (i):(length(arrays))) {
commonfol[i,j] <- length(intersect(arrays[[i]]$user_id, arrays[[j]]$user_id))
}
}
commonfol = commonfol + t(commonfol)
diag(commonfol) = diag(commonfol)/2
library(graphclass)
d <- sqrt(diag(commonfol))+ 0.001
u = (diag(1/d)  %*% commonfol %*% diag(1/d))
diag(u) = 0
plot_adjmatrix(u)
d2 <- rowSums(u)
plot_adjmatrix(diag(1/sqrt(d2)) %*% u %*% diag(1/sqrt(d2) ))
L <- diag(1/sqrt(d2)) %*% u %*% diag(1/sqrt(d2) )
colSums(L)
plot(eigen(L)$vectors[,1])
ord <- order(eigen(L)$vectors[,1])
plot_adjmatrix(L[ord, ord])
users
plot(eigen(L)$values)
plot(eigen(L)$vectors[,3], eigen(L)$vectors[,2])
text(x = eigen(L)$vectors[,3], eigen(L)$vectors[,2],  labels = c(labes1,
users))
plot(eigen(L)$vectors[,1], eigen(L)$vectors[,2])
text(x = eigen(L)$vectors[,1], eigen(L)$vectors[,2],  labels = c(labes1,
users))
plot(eigen(L)$vectors[,1], eigen(L)$vectors[,4])
text(x = eigen(L)$vectors[,1], eigen(L)$vectors[,4],  labels = c(labes1,
users))
plot(as.double(usrfoll2$user_id))
names_usr <- (c(labes1,
users))
sizes  <- sapply(arrays, function(x) length(x$user_id))
rts2 <- get_retweeters("1351651881454485504", n = 200)
rts3 <- get_retweeters("1356264105351364608", n = 200)
rts3$user_id
rt_to_user <- rep(0, length(arrays))
for(j in (1):(length(arrays))) {
rt_to_user[j] <- length(intersect(rts2$user_id, arrays[[j]]$user_id))
}
cbind(names_usr, rt_to_user/sizes)
plot(log(rt_to_user/sizes))
text(log(rt_to_user/sizes),  labels = names_usr)
rt_to_user <- rep(0, length(arrays))
for(j in (1):(length(arrays))) {
rt_to_user[j] <- length(intersect(rts3$user_id, arrays[[j]]$user_id))
}
cbind(names_usr, rt_to_user/sizes)
plot(log(rt_to_user/sizes))
## load packages
require('igraph')
require('mstknnclust')
install.packages("mstknnclust")
install.packages("mstknnclust")
library(graphclass)
# Scenario 1
V = kronecker(diag(2), rep(1, 6))
W = kronecker(diag(4), rep(1, 3))
W[, 3] = W[, 3] + W[, 4]
W = W[, 1:3]
W
plot_adjmatrix(V)
plot_adjmatrix(t(V))
plot_adjmatrix(t(W))
Usvd = svd(U)
Usvd$d
plot(Usvd$u[, 3])
Vhat = Usvd$u[, 1:3]
res1 = tcrossprod(Vhat) - tcrossprod(svd(V)$u)
plot_adjmatrix(res1)
svd(res1)$d
# Scenario 1
V = kronecker(diag(2), rep(1, 6))
W = kronecker(diag(4), rep(1, 3))
W[, 3] = W[, 3] + W[, 4]
W = W[, 1:3]
Usvd = svd(U)
Usvd$d
U = cbind(V, W)
Usvd = svd(U)
Usvd$d
plot(Usvd$u[, 3])
Vhat = Usvd$u[, 1:3]
res1 = tcrossprod(Vhat) - tcrossprod(svd(V)$u)
plot_adjmatrix(res1)
svd(res1)$d
plot(svd(res1)$u[,1])
plot_adjmatrix(t(svd(res1)$u[,1]))
plot_adjmatrix(t(svd(res1)$u[,1, drop = F]))
t(svd(res1)$u[,1, drop = F]
t(svd(res1)$u[,1, drop = F])
t(svd(res1)$u[,1, drop = F])
plot_adjmatrix((svd(res1)$u[,1, drop = F]))
plot_adjmatrix(as.matrix(svd(res1)$u[,1, drop = F]))
plot_adjmatrix(t(V))
as.matrix(svd(res1)$u[,1, drop = F])
svd(res1)$u[,1, drop = F]
svd(res1)$u[,1, drop = F], 0, 0)
cbind(as.matrix(
svd(res1)$u[,1, drop = F], 0, 0))
cbind(as.matrix(
svd(res1)$u[,1, drop = F]), 0, 0)
plot_adjmatrix(cbind(as.matrix(
svd(res1)$u[,1, drop = F]), 0, 0))
plot_adjmatrix(t(cbind(as.matrix(
svd(res1)$u[,1, drop = F]), 0, 0)))
plot_adjmatrix(t(cbind(as.matrix(
svd(res1)$u[,1, drop = F]), 0, 0)), colorlims = c(-1,1))
plot_adjmatrix(t(V))
plot_adjmatrix(t(W))
plot_adjmatrix(t(cbind(as.matrix(
svd(res1)$u[,1, drop = F]), 0, 0)), colorlims = c(-1,1))
plot_adjmatrix(t(cbind(as.matrix(
svd(res1)$u[,1, drop = F]), 0, 0)), colorlims = c(-1,1), main = "X - proj_Y(X)")
plot_adjmatrix(t(V), main = "X")
plot_adjmatrix(t(W), main = "Y")
plot_adjmatrix(t(cbind(as.matrix(
svd(res1)$u[,1, drop = F]), 0, 0)), colorlims = c(-1,1), main = "X - proj_Y(X)")
plot_adjmatrix(t(V), main = "Y")
plot_adjmatrix(t(W), main = "X")
plot_adjmatrix(t(cbind(as.matrix(
svd(res1)$u[,1, drop = F]), 0, 0)), colorlims = c(-1,1), main = "X - proj_Y(X)")
plot_adjmatrix(t(cbind(as.matrix(
svd(res1)$u[,1, drop = F]), 0, 0)), colorlims = c(-1,1), main = "X - proj_Y(X)")
plot_adjmatrix(t(cbind(as.matrix(
svd(res1)$u[,1, drop = F]), 0, 0))[, 1], colorlims = c(-1,1), main = "X - proj_Y(X)")
plot_adjmatrix(t(cbind(as.matrix(
svd(res1)$u[,1, drop = F]), 0, 0)[,1]), colorlims = c(-1,1), main = "X - proj_Y(X)")
plot_adjmatrix
plot_adjmatrix <- function (edgevalues, type = c("undirected", "directed"), edgetype = c("real",
"prob", "binary"), communities = NULL, community_labels = NULL,
main = "", axislabel = "Nodes", colorlims = NULL)
{
browser()
type <- match.arg(type)
require(lattice)
require(Matrix)
edgetype <- match.arg(edgetype)
if (is.null(dim(edgevalues))) {
if (type == "undirected") {
NODES <- (1 + sqrt(1 + 8 * length(edgevalues)))/2
}
else {
if (type == "directed") {
NODES <- (1 + sqrt(1 + 8 * length(edgevalues)/2))/2
}
else {
stop("The value of type should be \"undirected\" or \"directed\"")
}
}
Adj_matr <- as.matrix(get_matrix(edgevalues, type))
}
else {
Adj_matr <- as.matrix(edgevalues)
NODES <- ncol(Adj_matr)
}
tckspace <- round(NODES/5, -floor(log10(NODES/5)))
cuts <- 100
colorkey <- TRUE
atneg <- 0
atpos <- 0
col.regions.neg <- rgb(red = 1, green = 1, blue = 1)
col.regions.pos <- rgb(red = 1, green = 1, blue = 1)
if (is.null(colorlims)) {
min_Adj <- min(Adj_matr[!is.na(Adj_matr)])
max_Adj <- max(Adj_matr[!is.na(Adj_matr)])
}
else {
min_Adj <- colorlims[1]
max_Adj <- colorlims[2]
}
if (min_Adj < 0) {
atneg <- seq(min_Adj, max(-1e-16, min(Adj_matr)), length.out = cuts)
col.regions.neg <- rgb((cuts:0)/cuts, green = 0, blue = 1,
red = 0)
}
if (max_Adj > 0) {
atpos <- seq(1e-16, max_Adj, length.out = cuts)
col.regions.pos <- rgb((0:cuts)/cuts, green = 0, blue = 0,
red = 1)
}
atval = unique(c(atneg, 0, atpos))
col.vals = unique(c(col.regions.neg, rgb(red = 1, green = 1,
blue = 1), col.regions.pos))
if (edgetype == "prob") {
atval = seq(0, 1, length.out = cuts)
col.vals = rgb((0:cuts)/cuts, green = 0, blue = 1, red = 0)
}
if (edgetype == "binary") {
colorkey <- FALSE
Adj_matr <- 1 * (Adj_matr != 0)
atval <- seq(0, 1, length.out = cuts)
col.vals <- rgb((0:cuts)/cuts, green = 0, blue = 1, red = 0)
}
if (!is.null(communities)) {
lengths_coms = sapply(communities, length)
scales_list = list(tck = c(0, 0), x = list(at = Reduce("+",
c(0, lengths_coms[1:(length(lengths_coms) - 1)]),
accumulate = T) + lengths_coms/2, labels = community_labels),
y = list(at = Reduce("+", c(0, rev(lengths_coms)[1:(length(lengths_coms) -
1)]), accumulate = T) + rev(lengths_coms)/2,
labels = rev(community_labels)))
panel_func = function(...) {
panel.levelplot(...)
if (type == "prob_cells") {
select_list <- which(sel_cells, arr.ind = T)
for (cell in 1:nrow(select_list)) {
fill_block(select_list[cell, 1], select_list[cell,
2], communities)
}
}
for (u in Reduce("+", lengths_coms, accumulate = T)) {
panel.abline(v = u + 0.5)
}
for (u in Reduce("+", rev(lengths_coms), accumulate = T)) {
panel.abline(h = u + 0.5)
}
}
nodeorder = unlist(communities)
Adj_matr <- Adj_matr[nodeorder, nodeorder]
Adj_matr <- Adj_matr[, seq(from = ncol(Adj_matr), to = 1,
by = -1)]
levelplot(Adj_matr, at = atval, xlab = axislabel, ylab = axislabel,
main = main, colorkey = colorkey, col.regions = col.vals,
panel = panel_func, scales = scales_list)
}
else {
Adj_matr <- Adj_matr[, seq(from = ncol(Adj_matr), to = 1,
by = -1)]
levelplot(Adj_matr, at = atval, xlab = axislabel, ylab = axislabel,
col.regions = col.vals, main = main, colorkey = colorkey,
scales = list(tck = c(1, 0), x = list(at = seq(0,
ncol(Adj_matr), by = tckspace)), y = list(at = NODES -
tckspace - seq(0, ncol(Adj_matr), by = tckspace),
labels = (seq(tckspace, ncol(Adj_matr), tckspace)))))
}
}
<bytecode: 0x000000000b946258>
<environment: namespace:graphclass>
plot_adjmatrix(t(cbind(as.matrix(
svd(res1)$u[,1, drop = F]), 0,)[,1]), colorlims = c(-1,1), main = "X - proj_Y(X)")
edgevalues
edgevalues
plot_adjmatrix(edgevalues = as.matrix(svd(res1)$u[,1, drop = F]))
edgevalues
plot_adjmatrix(edgevalues = as.matrix(svd(res1)$u[,1, drop = F]))
NODES
Adj_matr
NODES
Adj_matr
plot_adjmatrix <- function (edgevalues, type = c("undirected", "directed"), edgetype = c("real",
"prob", "binary"), communities = NULL, community_labels = NULL,
main = "", axislabel = "Nodes", colorlims = NULL)
{
browser()
type <- match.arg(type)
require(lattice)
require(Matrix)
edgetype <- match.arg(edgetype)
if (is.null(dim(edgevalues))) {
if (type == "undirected") {
NODES <- (1 + sqrt(1 + 8 * length(edgevalues)))/2
}
else {
if (type == "directed") {
NODES <- (1 + sqrt(1 + 8 * length(edgevalues)/2))/2
}
else {
stop("The value of type should be \"undirected\" or \"directed\"")
}
}
Adj_matr <- as.matrix(get_matrix(edgevalues, type))
}
else {
Adj_matr <- as.matrix(edgevalues)
NODES <- ncol(Adj_matr)
}
tckspace <- round(NODES/5, -floor(log10(NODES/5)))
cuts <- 100
colorkey <- TRUE
atneg <- 0
atpos <- 0
col.regions.neg <- rgb(red = 1, green = 1, blue = 1)
col.regions.pos <- rgb(red = 1, green = 1, blue = 1)
if (is.null(colorlims)) {
min_Adj <- min(Adj_matr[!is.na(Adj_matr)])
max_Adj <- max(Adj_matr[!is.na(Adj_matr)])
}
else {
min_Adj <- colorlims[1]
max_Adj <- colorlims[2]
}
if (min_Adj < 0) {
atneg <- seq(min_Adj, max(-1e-16, min(Adj_matr)), length.out = cuts)
col.regions.neg <- rgb((cuts:0)/cuts, green = 0, blue = 1,
red = 0)
}
if (max_Adj > 0) {
atpos <- seq(1e-16, max_Adj, length.out = cuts)
col.regions.pos <- rgb((0:cuts)/cuts, green = 0, blue = 0,
red = 1)
}
atval = unique(c(atneg, 0, atpos))
col.vals = unique(c(col.regions.neg, rgb(red = 1, green = 1,
blue = 1), col.regions.pos))
if (edgetype == "prob") {
atval = seq(0, 1, length.out = cuts)
col.vals = rgb((0:cuts)/cuts, green = 0, blue = 1, red = 0)
}
if (edgetype == "binary") {
colorkey <- FALSE
Adj_matr <- 1 * (Adj_matr != 0)
atval <- seq(0, 1, length.out = cuts)
col.vals <- rgb((0:cuts)/cuts, green = 0, blue = 1, red = 0)
}
if (!is.null(communities)) {
lengths_coms = sapply(communities, length)
scales_list = list(tck = c(0, 0), x = list(at = Reduce("+",
c(0, lengths_coms[1:(length(lengths_coms) - 1)]),
accumulate = T) + lengths_coms/2, labels = community_labels),
y = list(at = Reduce("+", c(0, rev(lengths_coms)[1:(length(lengths_coms) -
1)]), accumulate = T) + rev(lengths_coms)/2,
labels = rev(community_labels)))
panel_func = function(...) {
panel.levelplot(...)
if (type == "prob_cells") {
select_list <- which(sel_cells, arr.ind = T)
for (cell in 1:nrow(select_list)) {
fill_block(select_list[cell, 1], select_list[cell,
2], communities)
}
}
for (u in Reduce("+", lengths_coms, accumulate = T)) {
panel.abline(v = u + 0.5)
}
for (u in Reduce("+", rev(lengths_coms), accumulate = T)) {
panel.abline(h = u + 0.5)
}
}
nodeorder = unlist(communities)
Adj_matr <- Adj_matr[nodeorder, nodeorder]
Adj_matr <- Adj_matr[, seq(from = ncol(Adj_matr), to = 1,
by = -1)]
levelplot(Adj_matr, at = atval, xlab = axislabel, ylab = axislabel,
main = main, colorkey = colorkey, col.regions = col.vals,
panel = panel_func, scales = scales_list)
}
else {
Adj_matr <- Adj_matr[, seq(from = ncol(Adj_matr), to = 1,
by = -1), drop = F]
levelplot(Adj_matr, at = atval, xlab = axislabel, ylab = axislabel,
col.regions = col.vals, main = main, colorkey = colorkey,
scales = list(tck = c(1, 0), x = list(at = seq(0,
ncol(Adj_matr), by = tckspace)), y = list(at = NODES -
tckspace - seq(0, ncol(Adj_matr), by = tckspace),
labels = (seq(tckspace, ncol(Adj_matr), tckspace)))))
}
}
plot_adjmatrix(edgevalues = as.matrix(svd(res1)$u[,1, drop = F]))
plot_adjmatrix(edgevalues = as.matrix(svd(res1)$u[,1, drop = F]))
NODES
NODES = 12
Adj_matr
plot_adjmatrix(edgevalues = as.matrix(svd(res1)$u[,1, drop = F]))
plot_adjmatrix(edgevalues = t(as.matrix(svd(res1)$u[,1, drop = F])))
plot_adjmatrix(t(cbind(as.matrix(
svd(res1)$u[,1, drop = F]), 0,)[,1]), colorlims = c(-1,1), main = "X - proj_Y(X)")
plot_adjmatrix <- function (edgevalues, type = c("undirected", "directed"), edgetype = c("real",
"prob", "binary"), communities = NULL, community_labels = NULL,
main = "", axislabel = "Nodes", colorlims = NULL)
{
type <- match.arg(type)
require(lattice)
require(Matrix)
edgetype <- match.arg(edgetype)
if (is.null(dim(edgevalues))) {
if (type == "undirected") {
NODES <- (1 + sqrt(1 + 8 * length(edgevalues)))/2
}
else {
if (type == "directed") {
NODES <- (1 + sqrt(1 + 8 * length(edgevalues)/2))/2
}
else {
stop("The value of type should be \"undirected\" or \"directed\"")
}
}
Adj_matr <- as.matrix(get_matrix(edgevalues, type))
}
else {
Adj_matr <- as.matrix(edgevalues)
NODES <- max(nrow(Adj_matr, ncol(Adj_matr))
}
tckspace <- round(NODES/5, -floor(log10(NODES/5)))
cuts <- 100
colorkey <- TRUE
atneg <- 0
atpos <- 0
col.regions.neg <- rgb(red = 1, green = 1, blue = 1)
col.regions.pos <- rgb(red = 1, green = 1, blue = 1)
if (is.null(colorlims)) {
min_Adj <- min(Adj_matr[!is.na(Adj_matr)])
max_Adj <- max(Adj_matr[!is.na(Adj_matr)])
}
else {
min_Adj <- colorlims[1]
max_Adj <- colorlims[2]
}
if (min_Adj < 0) {
atneg <- seq(min_Adj, max(-1e-16, min(Adj_matr)), length.out = cuts)
col.regions.neg <- rgb((cuts:0)/cuts, green = 0, blue = 1,
red = 0)
}
if (max_Adj > 0) {
atpos <- seq(1e-16, max_Adj, length.out = cuts)
col.regions.pos <- rgb((0:cuts)/cuts, green = 0, blue = 0,
red = 1)
}
atval = unique(c(atneg, 0, atpos))
col.vals = unique(c(col.regions.neg, rgb(red = 1, green = 1,
blue = 1), col.regions.pos))
if (edgetype == "prob") {
atval = seq(0, 1, length.out = cuts)
col.vals = rgb((0:cuts)/cuts, green = 0, blue = 1, red = 0)
}
if (edgetype == "binary") {
colorkey <- FALSE
Adj_matr <- 1 * (Adj_matr != 0)
atval <- seq(0, 1, length.out = cuts)
col.vals <- rgb((0:cuts)/cuts, green = 0, blue = 1, red = 0)
}
if (!is.null(communities)) {
lengths_coms = sapply(communities, length)
scales_list = list(tck = c(0, 0), x = list(at = Reduce("+",
c(0, lengths_coms[1:(length(lengths_coms) - 1)]),
accumulate = T) + lengths_coms/2, labels = community_labels),
y = list(at = Reduce("+", c(0, rev(lengths_coms)[1:(length(lengths_coms) -
1)]), accumulate = T) + rev(lengths_coms)/2,
labels = rev(community_labels)))
panel_func = function(...) {
panel.levelplot(...)
if (type == "prob_cells") {
select_list <- which(sel_cells, arr.ind = T)
for (cell in 1:nrow(select_list)) {
fill_block(select_list[cell, 1], select_list[cell,
2], communities)
}
}
for (u in Reduce("+", lengths_coms, accumulate = T)) {
panel.abline(v = u + 0.5)
}
for (u in Reduce("+", rev(lengths_coms), accumulate = T)) {
panel.abline(h = u + 0.5)
}
}
nodeorder = unlist(communities)
Adj_matr <- Adj_matr[nodeorder, nodeorder]
Adj_matr <- Adj_matr[, seq(from = ncol(Adj_matr), to = 1,
by = -1)]
levelplot(Adj_matr, at = atval, xlab = axislabel, ylab = axislabel,
main = main, colorkey = colorkey, col.regions = col.vals,
panel = panel_func, scales = scales_list)
}
else {
Adj_matr <- Adj_matr[, seq(from = ncol(Adj_matr), to = 1,
by = -1), drop = F]
levelplot(Adj_matr, at = atval, xlab = axislabel, ylab = axislabel,
col.regions = col.vals, main = main, colorkey = colorkey,
scales = list(tck = c(1, 0), x = list(at = seq(0,
ncol(Adj_matr), by = tckspace)), y = list(at = NODES -
tckspace - seq(0, ncol(Adj_matr), by = tckspace),
labels = (seq(tckspace, ncol(Adj_matr), tckspace)))))
}
}
<bytecode: 0x000000000b946258>
<environment: namespace:graphclass>
plot_adjmatrix(edgevalues = t(as.matrix(svd(res1)$u[,1, drop = F]))
, colorlims = c(-1,1), main = "X - proj_Y(X)")
2^10/10!
factorial(10)
2^10/factorial(10)
2^20/factorial(20)
factorial(10)/2^45
setwd("C:/Users/JDAR/Box Sync/JHU/GM/Bipartite/rBipartiteUnipartiteMatch/R")
